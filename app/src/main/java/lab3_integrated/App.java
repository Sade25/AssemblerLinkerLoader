/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab3_integrated;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.Stream;

import lab3_integrated.assembler.lab2.AssemblerApp;
import lab3_integrated.linker.LinkerApp;
import lab3_integrated.simulator.simulator.Simulator;

public class App {

    enum ArgTypes {
        INPUT, OUTPUT, NONE
    }
    private static final String linker_file = "linker___output.o";
    public static void main(String[] args) {
        ArrayList<String> asm_out = new ArrayList<>();
        for (String in : args) {
            System.out.println("Running assembler for  " + in);
            String out = in + ".o";
            asm_out.add(out);
            String[] asm_args = {"asssembler", in, out, "discard.listing"};
            try {
                AssemblerApp.main(asm_args);
            } catch (Exception e) {
                System.err.println("ERROR: " + e.getMessage());
                cleanUpFiles(asm_out);
                System.exit(-1);
            }
        }
        
        String[] linker_in = new String[asm_out.size() + 1];
        asm_out.toArray(linker_in);
        System.out.println(Arrays.toString(linker_in));
        if (linker_in[linker_in.length - 1] != null) {
            System.err.println("ERROR passing information from assembler to linker.");
            cleanUpFiles(asm_out);
            System.exit(-1);
        } else {
            linker_in[linker_in.length - 1] = linker_file; 
        }
        try {
            LinkerApp.main(linker_in);
        } catch (Exception e) {
            System.out.println(e.getMessage());
            cleanUpFiles(asm_out);
            new File(linker_file).delete();
        }
        System.out.println("Running simulator");
        Simulator.simulator_main(linker_file);
        cleanUpFiles(asm_out);
        new File(linker_file).delete();
    }
    
    static void cleanUpFiles(ArrayList<String> paths) {
        for (String created_file : paths) {
            File file = new File(created_file);
            file.delete();
        }
    }
}
